<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" version="2.0"><channel><title>Snoozetime's webpage</title><link>http://snoozetime.github.io/</link><description>Post about my interests. Might include stuff about coding, reading, traveling or boxing</description><atom:link href="http://snoozetime.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2018 &lt;a href="mailto:benoit.eudier@gmail.com"&gt;Snoozetime&lt;/a&gt; </copyright><lastBuildDate>Sat, 26 May 2018 10:51:05 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Bezier curve in Unity: Bounding boxes</title><link>http://snoozetime.github.io/posts/slug/</link><dc:creator>Snoozetime</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Introduction&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
&amp;lt;PUT IMAGE OF MICROMACHINE&amp;gt;
&lt;/p&gt;

&lt;p&gt;
Instead of the common FPS/RPG/Platformer, for some reason I decide to create a clone of the old micromachine,
in particular the elimination mode when players are eliminated when they are too far away from the first player.
&lt;/p&gt;

&lt;p&gt;
As the game was creating itself in my head, I stumbled against a mathematical obstacle in the first week
of prototyping. How to determine which player is the first? How to determinate what path the AI should
follow.
&lt;/p&gt;

&lt;p&gt;
It turns out that part of the answer is to represent tracks as a curve, and Bezier curves are used in a bunch of
applications from photoshop to font creation. To find out what player is first, I would just have
to calculate the position of all pilots on the tracks.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Some reading before getting started&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
This article will be introducing a bit a linear algebra. In particular, we will apply translation and
rotation to our vectors. Also, we need to find the roots of a quadratic equation. The maths are not
too complicated but feel free to read the following links beforehand:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Quadratic_equation"&gt;Wikipedia article on finding the roots of a quadratic formula&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://planning.cs.uiuc.edu/node97.html"&gt;Description of translation, rotation and their combinaison&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
This article builds on an existing article which can be found here: &lt;a href="https://catlikecoding.com/unity/tutorials/curves-and-splines/"&gt;https://catlikecoding.com/unity/tutorials/curves-and-splines/&lt;/a&gt;
It shows how to implement a Bezier curve in Unity, showing at the same time how editor scripts work.
&lt;/p&gt;

&lt;p&gt;
The last resource is an ebook called "A primer on Bezier". It can be found &lt;a href="https://pomax.github.io/bezierinfo/"&gt;here.&lt;/a&gt;
This ebook contains all you need to know about Bezier curves, theory and pseudocode included.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://snoozetime.github.io/images/bezier_initial.png" alt="bezier_initial.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Bounding box&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Bounding box are useful. In my use case, I want to find the closest point to the spline so bounding boxes
will help determine what bezier curve I should select to do the calculation!
&lt;/p&gt;

&lt;p&gt;
The way to find the bounding box is to get the minimim/maximum along the x and y axis and create the boxes
from (x&lt;sub&gt;min&lt;/sub&gt;, y&lt;sub&gt;min&lt;/sub&gt;), (x&lt;sub&gt;min&lt;/sub&gt;, y&lt;sub&gt;max&lt;/sub&gt;), (x&lt;sub&gt;max&lt;/sub&gt;, y&lt;sub&gt;min&lt;/sub&gt;), (x&lt;sub&gt;max&lt;/sub&gt;, y&lt;sub&gt;max&lt;/sub&gt;).
&lt;/p&gt;

&lt;p&gt;
However, this has the tendency to create large bounding boxes so we can get tighter boxes by aligning them
along our curve. (&lt;a href="https://pomax.github.io/bezierinfo/#boundingbox"&gt;Part 17 - Bounding box&lt;/a&gt;)
&lt;/p&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-1" class="outline-3"&gt;
&lt;h3 id="sec-3-1"&gt;Beforehand, define the curve&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;p&gt;
Curve is such as
&lt;/p&gt;
\begin{equation}
B(t) = (1-t)^3P_0 + 3(1-t)^2tP_1 + 3(1-t)t^2P_2 + t^3P_3
\end{equation}

&lt;p&gt;
where \(P_0, P_1, P_2, P_3\) are the control points of the curve, in global coordinates.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-2" class="outline-3"&gt;
&lt;h3 id="sec-3-2"&gt;Align the curve on an axis.&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-2"&gt;
&lt;p&gt;
To align the curve, we first need to apply a translation T to the first point of the curve in order to place it
on the origin (0, 0). We have \(T = -P_0\).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Translation such as p0 is at (0,0)
Vector2 [] translatedVector = new Vector2[] {
    p0 - p0,
    p1 - p0,
    p2 - p0,
    p3 - p0
};
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then, we need to apply the rotation so that \(P_3\) is on the x-axis. Given x and y the coordinates of \(P_3\), x' and y'
the coordinates after rotation \(\theta\), we have the equations:
&lt;/p&gt;

\begin{equation}
x' = xcos(theta) - ysin(theta)

y' = ycos(theta) + x sin(theta)
\end{equation}

&lt;p&gt;
&lt;a href="https://www.siggraph.org/education/materials/HyperGraph/modeling/mod_tran/2drota.htm"&gt;Don't take my word for granted :)&lt;/a&gt;
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;private static Vector2 Rotate(Vector2 p, float theta) {
    // x' = x cos f - y sin f
    // y' = y cos f + x sin f
    float xp = p.x * Mathf.Cos(theta) - p.y * Mathf.Sin(theta);
    float yp = p.y * Mathf.Cos(theta) + p.x * Mathf.Sin(theta);

    return new Vector2(xp, yp);
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We find theta such as \(y' = 0\).
&lt;/p&gt;
\begin{equation}
\theta = atan(-y/x)
\end{equation}

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;// Find rotation such as translatedVector[3] is on the axis
Vector2 pp3 = translatedVector[3];
float theta = Mathf.Atan(-pp3.y/pp3.x);
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Just for fun, let's draw the Bezier curve after rotation.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;public static Vector2[] GetAlignedCurve(Vector2 p0, Vector2 p1, Vector2 p2, Vector2 p3) {

    // Translation such as p0 is at (0,0)
    Vector2 [] translatedVector = new Vector2[] {
	p0 - p0,
	p1 - p0,
	p2 - p0,
	p3 - p0
    };

    // Find rotation such as translatedVector[3] is on the axis
    Vector2 pp3 = translatedVector[3];
    float theta = Mathf.Atan(-pp3.y/pp3.x);

    // Now calculate new vectors.
    return new Vector2[] {
	Rotate(p0 - p0, theta),
	Rotate(p1 - p0, theta),
	Rotate(p2 - p0, theta),
	Rotate(p3 - p0, theta)
    };
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
When adding the aligned curve to the editor script, we get the following.
&lt;/p&gt;


&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://snoozetime.github.io/images/aligned_bezier.png" alt="aligned_bezier.png"&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-3" class="outline-3"&gt;
&lt;h3 id="sec-3-3"&gt;Find the bounding box for the aligned curve&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-3"&gt;
&lt;p&gt;
Once we have our aligned curve, we need to find its bounding box. To do so, we need to calculate the roots of the
curve for x and y in order to get the minimum and maximum on the axis for t between 0 and 1.
&lt;/p&gt;

&lt;p&gt;
To get an idea about why we want the minimum and maximum of a curve, please refer to my amazing drawing.
&lt;img src="http://snoozetime.github.io/images/bounding_box.png" alt="bounding_box.png"&gt;
&lt;/p&gt;

&lt;p&gt;
In this piece of art, the maximum and minimum of y are located on the curve. For x however, only the
minimum x is located on the curve. The maximum is one of our control point. This is why we absolutely
have to include the first and last control points when we want to find the minimum and maximum on each
axis.
&lt;/p&gt;

&lt;p&gt;
For a quadratic or cubic Bezier curve, it is very easy to find the minimum and maximum for each axis.
The way to do it is to calculate the derivate of the curve, and find the t values for which this
derivative is 0. These values are called the roots of the curve for the x or y axis. The Wikipedia
article at the top of the blog article explains it more deeply.
&lt;/p&gt;

&lt;p&gt;
After deriving the Bezier equation and simplifying it a bit, we obtain:
&lt;/p&gt;
\begin{equation}
3 (-x_{p_0} + 3x_{p_1} - 3x_{p_2} + x_{p_3})t^2 + 6(x_{p_0} - 2x_{p_1} + x_{p_2})t + 3(x_{p_1} - x_{p_0}) = 0
\end{equation}

&lt;p&gt;
Where \(x_{p_i}\) is the x coordinate of the point i. There is the same equation for y. Now that
we have reduce our equation to a simple quadratic equation, the solution is textbook.
&lt;/p&gt;

\begin{equation}
a = 3(-x_{p_0} + 3x_{p_1} - 3x_{p_2} + x_{p_3})
\end{equation}

\begin{equation}
b = 6(x_{p_0} - 2x_{p_1} + x_{p_2})
\end{equation}

\begin{equation}
c = 3(x_{p_1} - x_{p_0})
\end{equation}

\begin{equation}
\Delta = b^2 - 4 ac
\end{equation}

&lt;p&gt;
\(\Delta\) (Delta) is the discriminant. We can find imaginary roots (that cannot be represented in our
2D space) when delta is negative, so here we are just interested about the real roots, meaning when
\(\Delta &amp;gt;= 0\).
&lt;/p&gt;

&lt;p&gt;
The two roots (which can be only one is the discriminant is 0) for the axis x are:
&lt;/p&gt;

\begin{equation}
t_1 = \frac{-b - \sqrt{\Delta}}{4ac}
\end{equation}

\begin{equation}
t_2 = \frac{-b + \sqrt{\Delta}}{4ac}
\end{equation}

&lt;p&gt;
Notice that when \(\Delta\) is 0, \(t_1\) and \(t_2\) are the same. For our Bezier curve, we only care about
parameter between 0 and 1 so the roots might not be usable. In C#, there is not much complexity. Just
write down the last equations and filter the values.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/*
  Find the roots of a cubic bezier curve in order to find minimum and maximum
 */
private static List&amp;lt;float&amp;gt; FindRoots(Vector2 p0, Vector2 p1, Vector2 p2, Vector2 p3) {
    Vector2 a = 3 * (-p0 + 3*p1 - 3*p2 + p3);
    Vector2 b = 6 * (p0 - 2*p1 + p2);
    Vector2 c = 3 * (p1 - p0);

    List&amp;lt;float&amp;gt; roots = new List&amp;lt;float&amp;gt;();

    // along x
    float discriminantX = b.x * b.x - 4 * a.x * c.x;
    if (discriminantX &amp;lt; 0) {
	// No roots
    } else if (discriminantX == 0) {
	// one real root
	float rootx = (-b.x) / (2 * a.x);
	if (rootx &amp;gt;=0 &amp;amp;&amp;amp; rootx &amp;lt;= 1) {
	    roots.Add(rootx);
	}
    } else if (discriminantX &amp;gt; 0) {
	// Two real roots
	float rootx1 = (-b.x + Mathf.Sqrt(discriminantX)) / (2 * a.x);
	float rootx2 = (-b.x - Mathf.Sqrt(discriminantX)) / (2 * a.x);
	if (rootx1 &amp;gt;=0 &amp;amp;&amp;amp; rootx1 &amp;lt;= 1) {
	    roots.Add(rootx1);
	}
	if (rootx2 &amp;gt;=0 &amp;amp;&amp;amp; rootx2 &amp;lt;= 1) {
	    roots.Add(rootx2);
	}
    }

    // along y
    float discriminantY = b.y * b.y - 4 * a.y * c.y;
    if (discriminantY &amp;lt; 0) {
	// No roots
    } else if (discriminantY == 0) {
	// one real root
	float rooty = (-b.y) / (2 * a.y);
	if (rooty &amp;gt;=0 &amp;amp;&amp;amp; rooty &amp;lt;= 1) {
	    roots.Add(rooty);
	}
    } else if (discriminantY &amp;gt; 0) {
	// Two real roots
	float rooty1 = (-b.y + Mathf.Sqrt(discriminantY)) / (2 * a.y);
	float rooty2 = (-b.y - Mathf.Sqrt(discriminantY)) / (2 * a.y);
	if (rooty1 &amp;gt;=0 &amp;amp;&amp;amp; rooty1 &amp;lt;= 1) {
	    roots.Add(rooty1);
	}
	if (rooty2 &amp;gt;=0 &amp;amp;&amp;amp; rooty2 &amp;lt;= 1) {
	    roots.Add(rooty2);
	}
    }

    return roots;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
(You can even refactor this to do the calculation once! When reading back this code I noticed that
I was a bit lazy here).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-4" class="outline-3"&gt;
&lt;h3 id="sec-3-4"&gt;Rotate the box back&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-4"&gt;
&lt;p&gt;
Apply in order a rotation of \(-theta\) and a translation of \(P_0\).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>2d</category><category>bezier</category><category>gamedev</category><category>mathjax</category><category>unity</category><guid>http://snoozetime.github.io/posts/slug/</guid><pubDate>Mon, 21 May 2018 15:00:00 GMT</pubDate></item><item><title>Random pictures in Japan 1</title><link>http://snoozetime.github.io/posts/random-pictures-in-japan-1/</link><dc:creator>Snoozetime</dc:creator><description>&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://snoozetime.github.io/images/monkey.jpg" alt="monkey.jpg"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 1:&lt;/span&gt; A dude chilling with his monkey&lt;/p&gt;
&lt;/div&gt;



&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://snoozetime.github.io/images/konniaku.jpg" alt="konniaku.jpg"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 2:&lt;/span&gt; An overly dramatic caption&lt;/p&gt;
&lt;/div&gt;



&lt;div class="figure"&gt;
&lt;p&gt;&lt;img src="http://snoozetime.github.io/images/cupnoodle.jpg" alt="cupnoodle.jpg"&gt;
&lt;/p&gt;
&lt;p&gt;&lt;span class="figure-number"&gt;Figure 3:&lt;/span&gt; Preschool fun at the CupNoodle museum in Minato Mirai&lt;/p&gt;
&lt;/div&gt;</description><guid>http://snoozetime.github.io/posts/random-pictures-in-japan-1/</guid><pubDate>Thu, 03 May 2018 13:56:55 GMT</pubDate></item><item><title>Code generation with Python - How learning Python can save you a bunch of time</title><link>http://snoozetime.github.io/posts/code-generation-python/</link><dc:creator>Snoozetime</dc:creator><description>&lt;p&gt;
More often than not, working in a IT project requires a lot of repetitive
tasks. In particular, one area that can be very debilitating is the creation
of test data. We know it is indispensable to the project, but it does not
make that task less boring.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;Let's consider this example&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;blockquote&gt;
&lt;p&gt;
You are working in a Java project. One of the thing to test is the validation
logic of some input XML files. One object, called the
XmlInputSuperbEnterpriseValidator (notice the Java naming convention), takes
a XML file path as input and return true if the file is valid.
&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;
Input file is just a simple XML file, which could look like this:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;root&amp;gt;
  &amp;lt;value1&amp;gt;1&amp;lt;/value1&amp;gt;
  &amp;lt;value2&amp;gt;a&amp;lt;/value2&amp;gt;
&amp;lt;/root&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
where value1 accepts number between 0 and 9 and value2 accepts letters (a-z).
&lt;/p&gt;

&lt;p&gt;
To test this, one can create a test class like the following.
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;package&lt;/span&gt; &lt;span class="nn"&gt;com.core.validator&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import static&lt;/span&gt; &lt;span class="nn"&gt;org.junit.Assert.*&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;

&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;XmlInputSuperEnterpriseValidatorTest&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;

    &lt;span class="nd"&gt;@Test&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="mo"&gt;01_&lt;/span&gt;&lt;span class="n"&gt;normalInput_returnsTrue&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
	 &lt;span class="n"&gt;assertTrue&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XmlInputSuperbEnterpriseValidator&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;validate&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"input/01.xml"&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then, for each test case, create the XML file and add exactly the same test
function.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;When things go sideways&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
What if you have 50 different permutations of XML file. You'll need to create
all of them and create the exact same test methods. And what if the
specification change and you have to add new fields? Here again, a lot of
manual operation will be required to update the test cases.
&lt;/p&gt;

&lt;p&gt;
What could happen here is that the tests will just be thrown away as the
maintenance is taking more effort that most people are willing to give.
&lt;/p&gt;

&lt;p&gt;
As a good little software engineer, one of the question that should pop out
of your mind is: "Isn't there a better way to do that?"
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;Of course there is a better way&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
It's not rocket science, but using python (or any other language really) to
automate the test creation will save you a bunch of time and also make
everybody in the project happier.
&lt;/p&gt;

&lt;p&gt;
The basic workflow is the following:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Create test data definition: It could be just a simple text file that
describes the tests you want to run.
&lt;/li&gt;
&lt;li&gt;Run the script to generate the data and the test class
&lt;/li&gt;
&lt;li&gt;Run the tests and enjoy
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-1" class="outline-3"&gt;
&lt;h3 id="sec-3-1"&gt;Test definition&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-1"&gt;
&lt;p&gt;
The test definition is the input of the generator. We need to specify what
kind of test data we want to generate. In this example, we want to generate
tests that will try all possible permutations for value1 and value2 of the
input file.
&lt;/p&gt;

&lt;p&gt;
The format of the test definition is up to you; here we will just use plain
text.
&lt;/p&gt;

&lt;pre class="example"&gt;
1,2,3,4,5,6,7,8,9
a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-2" class="outline-3"&gt;
&lt;h3 id="sec-3-2"&gt;Generating the test data and test class&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-3-2"&gt;
&lt;/div&gt;&lt;div id="outline-container-sec-3-2-1" class="outline-4"&gt;
&lt;h4 id="sec-3-2-1"&gt;Representing our test data in Python&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-3-2-1"&gt;
&lt;p&gt;
First things first, let's create a class that will represent the data for one
test:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestData&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
	&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value1&lt;/span&gt;
	&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;
	&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;
	&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We have our test data representation, great. Now we need a way to convert it
to text. We could just use Python string interpolation but there is a much
better way.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-2-2" class="outline-4"&gt;
&lt;h4 id="sec-3-2-2"&gt;Templating language, Yokoso&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-3-2-2"&gt;
&lt;p&gt;
A very neat way to generate text file in python is to use a templating
language. Web frameworks, such as Django or Flask, are heavy users of templating
language to generate the HTML pages from data coming from the server.
&lt;/p&gt;

&lt;p&gt;
Here, we will use &lt;a href="http://jinja.pocoo.org/docs/2.10/"&gt;jinja2&lt;/a&gt; to generate our XML and java files.
First, define the template using jinja templating language. Quick way is just
to define it as a string in the python file but it can also be read from file,
which is better practice when the templates are getting bigger and more numerous.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;XML_TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&amp;lt;root&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;lt;value1&amp;gt;{{ test_case.value1 }}&amp;lt;/value1&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;lt;value2&amp;gt;{{ test_case.value2 }}&amp;lt;/value2&amp;gt;&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Notice the curly brackets? Jinja will replace what's inside by whatever objects
we pass. Object should have variables 'value1' and 'value2' to work.
&lt;/p&gt;

&lt;p&gt;
The next snippet will print this template with a test case object.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__name__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XML_TEMPLATE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;test_case&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'path'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'value1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'value2'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;test_case&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
We insert the test&lt;sub&gt;case&lt;/sub&gt; variable in the template by passing it as a keyword argument
of the render method of jinja2.Template. This will print:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;root&amp;gt;
    &amp;lt;value1&amp;gt;value1&amp;lt;/value1&amp;gt;
    &amp;lt;value2&amp;gt;value2&amp;lt;/value2&amp;gt;&amp;gt;
&amp;lt;/root&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Creating the template for the java test class can be done in a similar fashion.
Here, we will leverage the for loop of jinja.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;JAVA_TEMPLATE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;span class="s2"&gt;package com.core.validator;&lt;/span&gt;

&lt;span class="s2"&gt;import static org.junit.Assert.*;&lt;/span&gt;

&lt;span class="s2"&gt;public class XmlInputSuperbEnterpriseValidatorTest {&lt;/span&gt;

&lt;span class="s2"&gt;    {&lt;/span&gt;&lt;span class="si"&gt;% f&lt;/span&gt;&lt;span class="s2"&gt;or test_case in test_cases %}&lt;/span&gt;
&lt;span class="s2"&gt;    @Test&lt;/span&gt;
&lt;span class="s2"&gt;    public void {{ test_case.name}}() {&lt;/span&gt;
&lt;span class="s2"&gt;	 assertTrue(XmlInputSuperbEnterpriseValidator.validate("{{ test_case.path }}{{ test_case.name}}"));&lt;/span&gt;
&lt;span class="s2"&gt;    }&lt;/span&gt;
&lt;span class="s2"&gt;    {&lt;/span&gt;&lt;span class="si"&gt;% e&lt;/span&gt;&lt;span class="s2"&gt;ndfor %}&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;

&lt;span class="s2"&gt;"""&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The variable to insert in the template is test&lt;sub&gt;cases&lt;/sub&gt;. It should be an iterable as we use
it in the for loop. Here how to generate 1000 test cases with the java class to test them.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;jinja2&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"__name__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;java_template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JAVA_TEMPLATE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;xml_template&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;XML_TEMPLATE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;path_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"/somewhere/you/want/"&lt;/span&gt;
    &lt;span class="n"&gt;test_cases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"{}_test"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
			   &lt;span class="n"&gt;path_out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
			   &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
			   &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="c1"&gt;# Create the java file&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path_out&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;'XmlInputSuperbEnterpriseValidatorTest.java'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;java_template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_cases&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;test_cases&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Create the xml files&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;test_case&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;test_cases&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;path_out&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;test_case&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;test_case&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
	    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;xml_template&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;render&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;test_case&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Instead of printing the rendered templates to the console, we will just write them to
a file.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3-2-3" class="outline-4"&gt;
&lt;h4 id="sec-3-2-3"&gt;Glue everything together&lt;/h4&gt;
&lt;div class="outline-text-4" id="text-3-2-3"&gt;
&lt;p&gt;
We have a way to represent our tests, we have a way to print our tests to file, we just need
to have a way to read our test specification and convert it to a TestCase object.
&lt;/p&gt;

&lt;p&gt;
Our input file first line is the value1, and the second line is the value2. To avoid cluttering
the blog post, I will assume the file is always correct and has as many elements in the first
line than in the second line.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'test_specification'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;test_input_values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rstrip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;()]&lt;/span&gt;
&lt;span class="n"&gt;values1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test_input_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;values2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;test_input_values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Then you can combine these value the way you want to create your test cases.
&lt;/p&gt;

&lt;p&gt;
Using zip:
&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;test_cases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{}_test'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nb&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
		       &lt;span class="n"&gt;path_out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
		       &lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
		       &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values2&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
zip will create a generator from many iterables. The ith element of a zip object is a tuple containing
the ith elements of each of the input iterables. For example,
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"{} - {}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Will print "1 - 2" and "3 - 4".
&lt;/p&gt;

&lt;p&gt;
zip is combined with enumerate. Enumerate is also very simple. It takes an iterator. The ith element
of enumerate is (i, ith element of input iterator).
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"Index {}: {}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;
Will print "Index 0: a" and "Index 1: b". Notice that when combining zip with enumerate, you need
to add brackets when unpacking the values. Not using brackets would throw a ValueError (not enough
values to unpack (expected 3, got 2). The reason is that enumerate is sending a tuple of size two.
&lt;/p&gt;

&lt;p&gt;
Another way to combine test cases is to use itertools.product. Product will yield all combinaisons
possible of multiple iterables.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'b'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'c'&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"{} - {}"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
will print:
1 - a
1 - b
1 - c
2 - a
2 - b
2 - c
&lt;/p&gt;

&lt;p&gt;
You can use product to test all the possible combinaisons of your input values.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;product&lt;/span&gt;

&lt;span class="n"&gt;test_cases&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'{}_test'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nb&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
		       &lt;span class="n"&gt;path_out&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
		       &lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
		       &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;nb&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;enumerate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;product&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;values1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values2&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
There is so much to say about generators, iterators.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Generalizing this approach&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
In this post, we learned about how to use python and jinja2 to automate test creation. Instead of
spending your precious time writing boilerplate code, you can just focus on what you want to test.
&lt;/p&gt;

&lt;p&gt;
This is a simple example, the concept of automation is very powerful and helps tremendously in every
day life. Even if your activities do not imply coding, there must be some repetitive task that can
be automize. For example, sending the same mail to each mail address in an excel spreadsheet. This
can be automized (see pandas to read from excel file).
&lt;/p&gt;

&lt;p&gt;
If you're interested in the subject, have a look at &lt;a href="https://automatetheboringstuff.com/"&gt;automate the boring stuff with Python.&lt;/a&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>programming</category><category>python</category><guid>http://snoozetime.github.io/posts/code-generation-python/</guid><pubDate>Tue, 01 May 2018 15:00:00 GMT</pubDate></item><item><title>Fantasy novel series, and the Wait</title><link>http://snoozetime.github.io/posts/fantasy-novel-series-and-the-wait/</link><dc:creator>Snoozetime</dc:creator><description>&lt;p&gt;
I've always been an avid reader of long fantasy novel series. As a kid, I used
to read Lord of the ring, Harry Potter (does it count? Yes it does!) and
basically everything I could put my hand on.
&lt;/p&gt;

&lt;p&gt;
More recently I've been a huge fan of the work of Brandon Sanderson. For those
who don't know, Sandersonis the epic fantasy writer. He builds entire world
in different series of books that are somewhat connected in the
grander scheme: &lt;a href="https://brandonsanderson.com/"&gt;Sanderson website&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
So yes, I really love epic Fantasy. But amazing book series come with a big
caveat: the Wait. As opposed to the Thrill while reading, the Wait is the
excruciable period from when I finish a book until the next one is released.
Let's take a few example: The Stormlight Archive by Sanderson is a novel
series which contains 3 books at the moment:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;The Way of Kings, published August 31, 2010
&lt;/li&gt;
&lt;li&gt;Words of Radiance, published March 4, 2014
&lt;/li&gt;
&lt;li&gt;Oathbringer, published November 14, 2017
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
I've been in a state of passive suffering for at least 7 years.
&lt;/p&gt;

&lt;p&gt;
Another great series of novel is &lt;i&gt;The Kingkiller Chronicle&lt;/i&gt; by Patrick
Rothfuss. Here, the last book has been published 7 years ago!
&lt;/p&gt;

&lt;p&gt;
And also, Game of Thrones people?
&lt;/p&gt;

&lt;p&gt;
To be clear, I am very grateful to the authors out there that are
publishing these fantastic books. But how to satisfy the Wait? I've found
two ways some far:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Read more novels. This has the benefit of making me forget a bit about
the previous book I read, but it might add more series to the wait list.
&lt;/li&gt;
&lt;li&gt;Read novel series that have already ended. That way no more wait. Just a
feeling of emptiness at the end.
&lt;/li&gt;
&lt;/ol&gt;</description><category>fantasy</category><category>reading</category><guid>http://snoozetime.github.io/posts/fantasy-novel-series-and-the-wait/</guid><pubDate>Thu, 26 Apr 2018 05:25:14 GMT</pubDate></item><item><title>Creating notes for different project with Orgmode and Emacs</title><link>http://snoozetime.github.io/posts/creating-notes-for-different-project-with-orgmode-and-emacs/</link><dc:creator>Snoozetime</dc:creator><description>&lt;p&gt;
I'm always amazed when I watch people mastering emacs. They can do everything
so much faster and with less keystrokes. However, if you have no experience with
elisp like me, extending emacs to do what I want seems like a daunting task.
&lt;/p&gt;

&lt;p&gt;
As always, reading books and blogs about Emacs can help (ironic that I am writing about this isn't it),
but practice beats everything when it comes to learing a new programming language.
That's why, after doing 20 times the same operation, I decided to implement some shortcut in Elisp.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;What I am trying to achieve&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I am working in multiple projects at a time, both in my professional and personal
life so I need to way to create notes quickly, and organize them so that I can
find them easily. I used to use Evernote for this but after switching everything
to Emacs I prefer using Orgmode.
&lt;/p&gt;

&lt;p&gt;
My custom Emacs command will prompt me for a project and a note name, and will
create a file in the correctly directory that I can edit.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Let's dissect the problem a bit&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Here I need a way to:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Find the list of my current projects
&lt;/li&gt;
&lt;li&gt;Get a name for the new note
&lt;/li&gt;
&lt;li&gt;Create the file name from above
&lt;/li&gt;
&lt;li&gt;Create the note and switch to orgmode
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;How to test Elips easily&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
Elisp is much easier when you can test commands one by one. There is a good tutorial &lt;a href="https://learnxinyminutes.com/docs/elisp/"&gt;here&lt;/a&gt; on lisp-interaction-mode.
This tutorial also links the great essay by Norvig about how to learn a programming language so I thought it was
appropriate to link it &lt;a href="http://norvig.com/21-days.html"&gt;here&lt;/a&gt; as well.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h3 id="sec-2-2"&gt;Find all the projects&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
Projects here are represented as subdirectory of the projects folder. Basically, the folders are structured as: ~/notes/projects/,
so notes for project 'example' would be stored under ~/notes/projects/example/.
&lt;/p&gt;

&lt;p&gt;
Here comes the first function. It will fetch all the directories under the projects folder and ask the user to choose one.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defvar&lt;/span&gt; &lt;span class="nv"&gt;my/project-path&lt;/span&gt; &lt;span class="s"&gt;"~/notes/projects"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/pick-project&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Prompt user to pick a choice from a list."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;choices&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;directory-files&lt;/span&gt; &lt;span class="nv"&gt;my/project-path&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt; &lt;span class="s"&gt;"%s"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;completing-read&lt;/span&gt; &lt;span class="s"&gt;"Open bookmark:"&lt;/span&gt; &lt;span class="nv"&gt;choices&lt;/span&gt; &lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here, &lt;i&gt;directory-files&lt;/i&gt; will list all the files in the given directory (one improvement would be to keep only folders).
Next line will prompt me for a choice in this list of file and will return my choice.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3" class="outline-3"&gt;
&lt;h3 id="sec-2-3"&gt;Get a note name&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-3"&gt;
&lt;p&gt;
To read a string from an user, read-string is the way to go.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/choose-note-name&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Prompt user to choose a note name"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;read-string&lt;/span&gt; &lt;span class="s"&gt;"Choose the note name: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This will open a mini-buffer and will display "Choose the note name: ". It will return the user's answer.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-4" class="outline-3"&gt;
&lt;h3 id="sec-2-4"&gt;Concatenate everything to get the note path&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-4"&gt;
&lt;p&gt;
I played around a bit with clojure so I was expecting concatenating a list of strings to be as easy, but unfortunatly
it is slightly more complicated here. I am using the concatenate function that requires a type specifier.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concatenate&lt;/span&gt; &lt;span class="ss"&gt;'string&lt;/span&gt; &lt;span class="s"&gt;"string1"&lt;/span&gt; &lt;span class="s"&gt;"string2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In the next function, I am also using the let form which let (:')) me write cleaner code.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/create-note-name&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;project-name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;my/pick-project&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;note-name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;my/choose-note-name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concatenate&lt;/span&gt; &lt;span class="ss"&gt;'string&lt;/span&gt;
		 &lt;span class="nv"&gt;me/project-path&lt;/span&gt;
		 &lt;span class="s"&gt;"/"&lt;/span&gt;
		 &lt;span class="nv"&gt;project-name&lt;/span&gt;
		 &lt;span class="s"&gt;"/"&lt;/span&gt;
		 &lt;span class="nv"&gt;note-name&lt;/span&gt;
		 &lt;span class="s"&gt;".org"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The hardcoded slashes are ugly and I pretty sure there is a better way to create the path from tokensâ¦
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-5" class="outline-3"&gt;
&lt;h3 id="sec-2-5"&gt;Create the note&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-5"&gt;
&lt;p&gt;
You can use find-file to create a file and edit it in the current window. In my case, I want to open a new window to edit
the note so I am using find-file-other-window instead.
&lt;/p&gt;

&lt;p&gt;
The function looks like:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/create-new-project-note&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;filename&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;my/create-note-name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;find-file-other-window&lt;/span&gt; &lt;span class="nv"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Notice (interactive) which is there to make the function available when typing M-x. (org-mode) is also called after switching
buffer so that the correct mode is used for editing the note.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;It's done! Butâ¦&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
There is a lot of things to improve:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;I'd like to be able to create a new project if it does not exist instead of having to create a new folder myself.
&lt;/li&gt;
&lt;li&gt;directory-files lists all files in a directory, including non-folders and ".", "..". These need to be filtered out.
&lt;/li&gt;
&lt;li&gt;Concatenating is ugly.
&lt;/li&gt;
&lt;li&gt;After creating a note, I am using yasnippet to set the note skeleton. There should be a way to automize that.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
That first experience with Elisp was anyway encouraging as I used this function everyday. Stay tuned for other code dissection ;)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Full code&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defvar&lt;/span&gt; &lt;span class="nv"&gt;my/project-path&lt;/span&gt; &lt;span class="s"&gt;"~/Nextcloud/notes/projects"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/pick-project&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Prompt user to pick a choice from a list."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;choices&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;directory-files&lt;/span&gt; &lt;span class="nv"&gt;my/project-path&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt; &lt;span class="s"&gt;"%s"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;completing-read&lt;/span&gt; &lt;span class="s"&gt;"Open bookmark:"&lt;/span&gt; &lt;span class="nv"&gt;choices&lt;/span&gt; &lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/choose-note-name&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Prompt user to choose a note name"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;read-string&lt;/span&gt; &lt;span class="s"&gt;"Choose the note name: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/create-note-name&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;project-name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;my/pick-project&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;note-name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;my/choose-note-name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concatenate&lt;/span&gt; &lt;span class="ss"&gt;'string&lt;/span&gt;
		 &lt;span class="nv"&gt;me/project-path&lt;/span&gt;
		 &lt;span class="s"&gt;"/"&lt;/span&gt;
		 &lt;span class="nv"&gt;project-name&lt;/span&gt;
		 &lt;span class="s"&gt;"/"&lt;/span&gt;
		 &lt;span class="nv"&gt;note-name&lt;/span&gt;
		 &lt;span class="s"&gt;".org"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/create-new-project-note&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;filename&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;my/create-note-name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;find-file-other-window&lt;/span&gt; &lt;span class="nv"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>learning</category><guid>http://snoozetime.github.io/posts/creating-notes-for-different-project-with-orgmode-and-emacs/</guid><pubDate>Mon, 16 Apr 2018 13:04:33 GMT</pubDate></item><item><title>Kucoin REST API, reality check</title><link>http://snoozetime.github.io/posts/kucoin-rest-api-reality-check/</link><dc:creator>Snoozetime</dc:creator><description>&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;My experience with kucoin REST API&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I've been playing a bit with cryptocurrency recently and Kucoin exchange, with its numerous coins, seemed like a great
place to experiment.
&lt;/p&gt;

&lt;p&gt;
However, as often in software, reality and expectations are not aligned. Let's forget about Kucoin limitation as an exchange
 (no market order?), what really hurt was the REST API quality.
&lt;/p&gt;

&lt;p&gt;
Getting details of an order does not work: &lt;a href="https://github.com/sammchardy/python-kucoin/issues/23"&gt;https://github.com/sammchardy/python-kucoin/issues/23&lt;/a&gt; (Check out the answer from
the exchange support for extra fun). Then, when trying to cancel an order, I received a "System Error". It appeared that 
orders could not be canceled through the API for some time. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Morale of the story&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
It looks like I am bashing Kucoin here. I am not (well maybe a bit).  The whole crypto space is young and moving at
an extreme pace. Competition between exchanges is hard and it does not surprise me that not everything is working
as expected. 
&lt;/p&gt;

&lt;p&gt;
As a developer, one should program defensively when dealing with external parties, even more when the external party 
cannot be trusted.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>cryptocurrency</category><guid>http://snoozetime.github.io/posts/kucoin-rest-api-reality-check/</guid><pubDate>Thu, 05 Apr 2018 09:06:41 GMT</pubDate></item></channel></rss>