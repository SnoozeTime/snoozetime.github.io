<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Snoozetime's webpage (Posts about code)</title><link>http://snoozetime.github.io/</link><description></description><atom:link rel="self" type="application/rss+xml" href="http://snoozetime.github.io/categories/cat_code.xml"></atom:link><language>en</language><copyright>Contents © 2018 &lt;a href="mailto:benoit.eudier@gmail.com"&gt;Snoozetime&lt;/a&gt; </copyright><lastBuildDate>Thu, 03 May 2018 12:57:47 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Creating notes for different project with Orgmode and Emacs</title><link>http://snoozetime.github.io/posts/creating-notes-for-different-project-with-orgmode-and-emacs/</link><dc:creator>Snoozetime</dc:creator><description>&lt;p&gt;
I'm always amazed when I watch people mastering emacs. They can do everything
so much faster and with less keystrokes. However, if you have no experience with
elisp like me, extending emacs to do what I want seems like a daunting task.
&lt;/p&gt;

&lt;p&gt;
As always, reading books and blogs about Emacs can help (ironic that I am writing about this isn't it),
but practice beats everything when it comes to learing a new programming language.
That's why, after doing 20 times the same operation, I decided to implement some shortcut in Elisp.
&lt;/p&gt;

&lt;div id="outline-container-sec-1" class="outline-2"&gt;
&lt;h2 id="sec-1"&gt;What I am trying to achieve&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I am working in multiple projects at a time, both in my professional and personal
life so I need to way to create notes quickly, and organize them so that I can
find them easily. I used to use Evernote for this but after switching everything
to Emacs I prefer using Orgmode.
&lt;/p&gt;

&lt;p&gt;
My custom Emacs command will prompt me for a project and a note name, and will
create a file in the correctly directory that I can edit.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2" class="outline-2"&gt;
&lt;h2 id="sec-2"&gt;Let's dissect the problem a bit&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Here I need a way to:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Find the list of my current projects
&lt;/li&gt;
&lt;li&gt;Get a name for the new note
&lt;/li&gt;
&lt;li&gt;Create the file name from above
&lt;/li&gt;
&lt;li&gt;Create the note and switch to orgmode
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-1" class="outline-3"&gt;
&lt;h3 id="sec-2-1"&gt;How to test Elips easily&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-1"&gt;
&lt;p&gt;
Elisp is much easier when you can test commands one by one. There is a good tutorial &lt;a href="https://learnxinyminutes.com/docs/elisp/"&gt;here&lt;/a&gt; on lisp-interaction-mode.
This tutorial also links the great essay by Norvig about how to learn a programming language so I thought it was
appropriate to link it &lt;a href="http://norvig.com/21-days.html"&gt;here&lt;/a&gt; as well.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-2" class="outline-3"&gt;
&lt;h3 id="sec-2-2"&gt;Find all the projects&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-2"&gt;
&lt;p&gt;
Projects here are represented as subdirectory of the projects folder. Basically, the folders are structured as: ~/notes/projects/,
so notes for project 'example' would be stored under ~/notes/projects/example/.
&lt;/p&gt;

&lt;p&gt;
Here comes the first function. It will fetch all the directories under the projects folder and ask the user to choose one.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defvar&lt;/span&gt; &lt;span class="nv"&gt;my/project-path&lt;/span&gt; &lt;span class="s"&gt;"~/notes/projects"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/pick-project&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Prompt user to pick a choice from a list."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;choices&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;directory-files&lt;/span&gt; &lt;span class="nv"&gt;my/project-path&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt; &lt;span class="s"&gt;"%s"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;completing-read&lt;/span&gt; &lt;span class="s"&gt;"Open bookmark:"&lt;/span&gt; &lt;span class="nv"&gt;choices&lt;/span&gt; &lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Here, &lt;i&gt;directory-files&lt;/i&gt; will list all the files in the given directory (one improvement would be to keep only folders).
Next line will prompt me for a choice in this list of file and will return my choice.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-3" class="outline-3"&gt;
&lt;h3 id="sec-2-3"&gt;Get a note name&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-3"&gt;
&lt;p&gt;
To read a string from an user, read-string is the way to go.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/choose-note-name&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Prompt user to choose a note name"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;read-string&lt;/span&gt; &lt;span class="s"&gt;"Choose the note name: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
This will open a mini-buffer and will display "Choose the note name: ". It will return the user's answer.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-4" class="outline-3"&gt;
&lt;h3 id="sec-2-4"&gt;Concatenate everything to get the note path&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-4"&gt;
&lt;p&gt;
I played around a bit with clojure so I was expecting concatenating a list of strings to be as easy, but unfortunatly
it is slightly more complicated here. I am using the concatenate function that requires a type specifier.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concatenate&lt;/span&gt; &lt;span class="ss"&gt;'string&lt;/span&gt; &lt;span class="s"&gt;"string1"&lt;/span&gt; &lt;span class="s"&gt;"string2"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
In the next function, I am also using the let form which let (:')) me write cleaner code.
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/create-note-name&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;project-name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;my/pick-project&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;note-name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;my/choose-note-name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concatenate&lt;/span&gt; &lt;span class="ss"&gt;'string&lt;/span&gt;
		 &lt;span class="nv"&gt;me/project-path&lt;/span&gt;
		 &lt;span class="s"&gt;"/"&lt;/span&gt;
		 &lt;span class="nv"&gt;project-name&lt;/span&gt;
		 &lt;span class="s"&gt;"/"&lt;/span&gt;
		 &lt;span class="nv"&gt;note-name&lt;/span&gt;
		 &lt;span class="s"&gt;".org"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
The hardcoded slashes are ugly and I pretty sure there is a better way to create the path from tokens…
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-2-5" class="outline-3"&gt;
&lt;h3 id="sec-2-5"&gt;Create the note&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-2-5"&gt;
&lt;p&gt;
You can use find-file to create a file and edit it in the current window. In my case, I want to open a new window to edit
the note so I am using find-file-other-window instead.
&lt;/p&gt;

&lt;p&gt;
The function looks like:
&lt;/p&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/create-new-project-note&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;filename&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;my/create-note-name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;find-file-other-window&lt;/span&gt; &lt;span class="nv"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;
Notice (interactive) which is there to make the function available when typing M-x. (org-mode) is also called after switching
buffer so that the correct mode is used for editing the note.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-3" class="outline-2"&gt;
&lt;h2 id="sec-3"&gt;It's done! But…&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
There is a lot of things to improve:
&lt;/p&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;I'd like to be able to create a new project if it does not exist instead of having to create a new folder myself.
&lt;/li&gt;
&lt;li&gt;directory-files lists all files in a directory, including non-folders and ".", "..". These need to be filtered out.
&lt;/li&gt;
&lt;li&gt;Concatenating is ugly.
&lt;/li&gt;
&lt;li&gt;After creating a note, I am using yasnippet to set the note skeleton. There should be a way to automize that.
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
That first experience with Elisp was anyway encouraging as I used this function everyday. Stay tuned for other code dissection ;)
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-sec-4" class="outline-2"&gt;
&lt;h2 id="sec-4"&gt;Full code&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defvar&lt;/span&gt; &lt;span class="nv"&gt;my/project-path&lt;/span&gt; &lt;span class="s"&gt;"~/Nextcloud/notes/projects"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/pick-project&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Prompt user to pick a choice from a list."&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;choices&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;directory-files&lt;/span&gt; &lt;span class="nv"&gt;my/project-path&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt; &lt;span class="s"&gt;"%s"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;completing-read&lt;/span&gt; &lt;span class="s"&gt;"Open bookmark:"&lt;/span&gt; &lt;span class="nv"&gt;choices&lt;/span&gt; &lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/choose-note-name&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="s"&gt;"Prompt user to choose a note name"&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;read-string&lt;/span&gt; &lt;span class="s"&gt;"Choose the note name: "&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/create-note-name&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;project-name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;my/pick-project&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
	&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;note-name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;my/choose-note-name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;concatenate&lt;/span&gt; &lt;span class="ss"&gt;'string&lt;/span&gt;
		 &lt;span class="nv"&gt;me/project-path&lt;/span&gt;
		 &lt;span class="s"&gt;"/"&lt;/span&gt;
		 &lt;span class="nv"&gt;project-name&lt;/span&gt;
		 &lt;span class="s"&gt;"/"&lt;/span&gt;
		 &lt;span class="nv"&gt;note-name&lt;/span&gt;
		 &lt;span class="s"&gt;".org"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;my/create-new-project-note&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;filename&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;my/create-note-name&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;find-file-other-window&lt;/span&gt; &lt;span class="nv"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;org-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category>emacs</category><category>learning</category><guid>http://snoozetime.github.io/posts/creating-notes-for-different-project-with-orgmode-and-emacs/</guid><pubDate>Mon, 16 Apr 2018 13:04:33 GMT</pubDate></item></channel></rss>